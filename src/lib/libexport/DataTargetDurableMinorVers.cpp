// Copyright 2017 Xcalar, Inc. All rights reserved.
//
// No use, or distribution, of this source code is permitted in any form or
// means without a valid, written license agreement with Xcalar, Inc.
// Please refer to the included "COPYING" file for terms and conditions
// regarding the use and redistribution of this software.

// Updating durable data structures must be done with care.  Please carefully
// read http://wiki.int.xcalar.com/mediawiki/index.php/Durables for instructions.

// This file semi-autogenerated by genproto.py
// Any custom minor versioning code can be added by hand here
// This file is designed for three-way merging with the
// autogenerated version.  Please try to minimize the opportunity
// for merge conflicts.

// ===> http://wiki.int.xcalar.com/mediawiki/index.php/Durables for details

#include <exception>
#include "StrlFunc.h"
#include "sys/XLog.h"

#include "export/DataTarget.h"
#include "subsys/DurableDataTarget.pb.h"
#include "DataTargetDurable.h"
#include "DurableVersions.h"
#include "durable/Durable.h"

void DataTargetDurable::pbDesExAddTargetSFInputMinorVersPre(void **node, ExAddTargetSFInput **raw, xcalar::internal::durable::datatarget::ExAddTargetSFInput *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesExAddTargetSFInputMinorVers(void **node, ExAddTargetSFInput **raw, xcalar::internal::durable::datatarget::ExAddTargetSFInput *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesExAddTargetSpecificInputMinorVersPre(void **node, ExAddTargetSpecificInput **raw, xcalar::internal::durable::datatarget::ExAddTargetSpecificInput *pb, const char * const idlSha, const int unionType) {

}

void DataTargetDurable::pbDesExAddTargetSpecificInputMinorVers(void **node, ExAddTargetSpecificInput **raw, xcalar::internal::durable::datatarget::ExAddTargetSpecificInput *pb, const char * const idlSha, const int unionType) {

}

void DataTargetDurable::pbDesExAddTargetUDFInputMinorVersPre(void **node, ExAddTargetUDFInput **raw, xcalar::internal::durable::datatarget::ExAddTargetUDFInput *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesExAddTargetUDFInputMinorVers(void **node, ExAddTargetUDFInput **raw, xcalar::internal::durable::datatarget::ExAddTargetUDFInput *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesExExportTargetMinorVersPre(void **node, ExExportTarget **raw, xcalar::internal::durable::datatarget::ExExportTarget *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesExExportTargetMinorVers(void **node, ExExportTarget **raw, xcalar::internal::durable::datatarget::ExExportTarget *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesExExportTargetHdrMinorVersPre(void **node, ExExportTargetHdr **raw, xcalar::internal::durable::datatarget::ExExportTargetHdr *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesExExportTargetHdrMinorVers(void **node, ExExportTargetHdr **raw, xcalar::internal::durable::datatarget::ExExportTargetHdr *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesTargetListPersistedDataMinorVersPre(void **node, DataTargetManager::TargetListPersistedData **raw, xcalar::internal::durable::datatarget::TargetListPersistedData *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesTargetListPersistedDataMinorVers(void **node, DataTargetManager::TargetListPersistedData **raw, xcalar::internal::durable::datatarget::TargetListPersistedData *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesTargetPersistHeaderMinorVersPre(void **node, DataTargetManager::TargetPersistHeader **raw, xcalar::internal::durable::datatarget::TargetPersistHeader *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDesTargetPersistHeaderMinorVers(void **node, DataTargetManager::TargetPersistHeader **raw, xcalar::internal::durable::datatarget::TargetPersistHeader *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDestimespecMinorVersPre(void **node, timespec **raw, xcalar::internal::durable::datatarget::timespec *pb, const char * const idlSha) {

}

void DataTargetDurable::pbDestimespecMinorVers(void **node, timespec **raw, xcalar::internal::durable::datatarget::timespec *pb, const char * const idlSha) {

}

