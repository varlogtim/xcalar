// **********************************************************************
// *** DO NOT EDIT!  This file was autogenerated by xcrpc             ***
// **********************************************************************
// Copyright 2018 Xcalar, Inc. All rights reserved.
//
// No use, or distribution, of this source code is permitted in any form or
// means without a valid, written license agreement with Xcalar, Inc.
// Please refer to the included "COPYING" file for terms and conditions
// regarding the use and redistribution of this software.
//

var client = require("./Client");
var service = require('./xcalar/compute/localtypes/Service_pb');

{% for package in packages %}
var {{package.alias}} = require("{{package.name}}");
{% endfor %}


////////////////////////////////////////////////////////////////////////////////
// Constructors
////////////////////////////////////////////////////////////////////////////////

{% for service in services %}
function {{service.class}}(client) {
    this.client = client;
}
{% endfor %}

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

{% for service in services %}
{{service.class}}.prototype = {
    {% for method in service.methods %}
    {{method.function}}: async function({{method.inVar}}) {
        // XXX we want to use Any.pack() here, but it is only available
        // in protobuf 3.2
        // https://github.com/google/protobuf/issues/2612#issuecomment-274567411
        var anyWrapper = new proto.google.protobuf.Any();
        anyWrapper.setValue({{method.inVar}}.serializeBinary());
        anyWrapper.setTypeUrl("type.googleapis.com/{{method.inTypeSig}}");
        //anyWrapper.pack({{method.inVar}}.serializeBinary(), "{{method.inClass}}");

        var responseData = await this.client.execute("{{service.name}}", "{{method.name}}", anyWrapper);
        var specificBytes = responseData.getValue();
        // XXX Any.unpack() is only available in protobuf 3.2; see above
        //var {{method.outVar}} =
        //    responseData.unpack({{method.outPackageAlias}}.{{method.outClass}}.deserializeBinary,
        //                        "{{method.outClass}}");
        var {{method.outVar}} = {{method.outPackageAlias}}.{{method.outClass}}.deserializeBinary(specificBytes);
        return {{method.outVar}};
    },
    {% endfor %}
};

{% endfor %}
{% for service in services %}
exports.{{service.class}} = {{service.class}};
{% endfor %}
