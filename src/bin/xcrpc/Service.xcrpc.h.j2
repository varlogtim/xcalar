// **********************************************************************
// *** DO NOT EDIT!  This file was autogenerated by xcrpc             ***
// **********************************************************************
// Copyright 2018 Xcalar, Inc. All rights reserved.
//
// No use, or distribution, of this source code is permitted in any form or
// means without a valid, written license agreement with Xcalar, Inc.
// Please refer to the included "COPYING" file for terms and conditions
// regarding the use and redistribution of this software.
//

#ifndef {{headerGuard}}
#define {{headerGuard}}

#include "primitives/Primitives.h"
#include "service/ServiceMgr.h"
#include "xcalar/compute/localtypes/Service.pb.h"
#include "xcalar/compute/localtypes/{{fileBase}}.pb.h"

{% for service in services %}
class {{service.class}}: public IService {
public:
    virtual ~{{service.class}}() = default;

    virtual const char *name() const {
        return "{{service.name}}";
    }

    virtual const MethodInfo *methods(int *numMethods) const {
        *numMethods = ArrayLen(methodList);
        return methodList;
    }

    {% for method in service.methods %}
    virtual Status {{method.function}}(const {{method.inType}} *{{method.inVar}}, {{method.outType}} *{{method.outVar}}) = 0;
    {% endfor %}

    static constexpr MethodInfo methodList[] = {
        {% for method in service.methods %}
        MethodInfo("{{method.name}}", invokeService<{{service.class}}, {{method.inType}}, {{method.outType}}, &{{service.class}}::{{method.function}}>),
        {% endfor %}
    };
};
{% endfor %}

#endif // {{headerGuard}}
