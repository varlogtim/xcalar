#!/bin/bash

# a flag BUILD_ONCE when set to 1 will cause any command such as clean or config to be skipped
# this is so the repo can be reused compiled as is for build-once-run-many jobs

set -eu

if [ -z ${XLRDIR+x} ]; then
    echo >&2 "XLRDIR must be set"
    exit 1
fi

export CCACHE_BASEDIR=$XLRDIR

BUFCACHEPOISON=${BUFCACHEPOISON:-false}
BUFCACHETRACE=${BUFCACHETRACE:-false}
CUSTOM_HEAP=${CUSTOM_HEAP:-false}
BUFCACHESHADOW=${BUFCACHESHADOW:-false}
ADDRESS_SANITIZER=${ADDRESS_SANITIZER:-false}
TUPLE_BUFFER_POISON=${TUPLE_BUFFER_POISON:-false}
MEMORY_PILE_PROTECT=${MEMORY_PILE_PROTECT:-false}
MEMORY_PILE_POISON=${MEMORY_PILE_POISON:-false}
MEMTRACKTRACE=${MEMTRACKTRACE:-false}
XDBPAGEHDRMAP=${XDBPAGEHDRMAP:-false}

export BUILD_DIR="${BUILD_DIR:-$XLRDIR/buildOut}"
PREFIX="${PREFIX:-/opt/xcalar}"
NINJA="${NINJA:-1}"
CMAKE="${CMAKE:-cmake}"
BUILD_ONCE="${BUILD_ONCE:-0}"

if ! $CMAKE --version | head -1 | grep -q ' 3\.'; then
   echo "Unable to find CMake3"
   exit 1
fi
if [ -z "${CXX_COMPILER:-}" ]; then
    if [ -z "${CXX:-}" ]; then
        export CXX=clang++
        export CC=clang
    fi
fi

export XLRQADIR="$BUILD_DIR/src/data/qa"

# If an autoconf build is present, fail
if [ -f "$XLRDIR/Makefile.in" ]; then
    echo >&2 "Autoconf build is present; please 'build clean'"
    exit 1
fi

if [ ! -d "$BUILD_DIR" ]; then
    echo >&2 "Build dir '$BUILD_DIR' does not exist; creating"
    mkdir -p "$BUILD_DIR"
fi

if [ "$NINJA" = "1" ]; then
    BUILDTOOL="$(command -v ninja)"
    if [ -z "$BUILDTOOL" ]; then
        BUILDTOOL="$(command -v ninja-build)"
    fi
    GEN_BUILD="Ninja"
else
    BUILDTOOL="make -j"
    GEN_BUILD="Unix Makefiles"
fi

[ $# -gt 0 ] || set -- xce

if [ "$1" = "config" ]; then
    if [ "${BUILD_ONCE}" = "1" ]; then
        echo "BUILD_ONCE set, skipping config, reusing build"
        exit 0
    fi
    shift
    if [ "$#" -lt 1 ]; then
        echo 1>&2 "Must specify config type (debug | qa | prod | release)"
        exit 1
    fi

    BUILD_ARGS=""
    if [ "$1" = "debug" ]; then
        BUILD_TYPE="Debug"
        BUILD_ARGS="$BUILD_ARGS -DENABLE_ASSERTIONS=ON"
    elif [ "$1" = "prod" ]; then
        BUILD_TYPE="RelWithDebInfo"
    elif [ "$1" = "release" ]; then
        BUILD_TYPE="Release"
    elif [ "$1" = "qa" ]; then
        BUILD_TYPE="RelWithDebInfo"
        BUILD_ARGS="$BUILD_ARGS -DENABLE_ASSERTIONS=ON"
    else
        echo "Build type '$1' not recognized"
        exit 1
    fi

    BUILD_ARGS="$BUILD_ARGS -DXCALAR_BUILD_TYPE:STRING=$1"
    shift

    if [ "$BUFCACHEPOISON" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DBUFCACHEPOISON=ON"
    fi

    if [ "$BUFCACHETRACE" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DBUFCACHETRACE=ON"
    fi

    if [ "$CUSTOM_HEAP" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DCUSTOM_HEAP=ON"
    fi

    if [ "$BUFCACHESHADOW" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DBUFCACHESHADOW=ON"
    fi

    if [ "$ADDRESS_SANITIZER" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DADDRESS_SANITIZER=ON"
    fi

    if [ "$XDBPAGEHDRMAP" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DXDBPAGEHDRMAP=ON"
    fi

    if [ "$MEMTRACKTRACE" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DMEMTRACKTRACE=ON"
    fi

    if [ "$MEMORY_PILE_POISON" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DMEMORY_PILE_POISON=ON"
    fi

    if [ "$MEMORY_PILE_PROTECT" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DMEMORY_PILE_PROTECT=ON"
    fi

    if [ "$TUPLE_BUFFER_POISON" = "true" ]; then
        BUILD_ARGS="$BUILD_ARGS -DTUPLE_BUFFER_POISON=ON"
    fi

    (cd "$BUILD_DIR" && $CMAKE \
        -G"$GEN_BUILD" \
        -DPKG_CONFIG_USE_CMAKE_PREFIX_PATH=ON \
        -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
        -DCMAKE_PREFIX_PATH:PATH=$PREFIX \
        -DCMAKE_INSTALL_PREFIX:PATH=$PREFIX \
        $BUILD_ARGS \
        "$@" ..)

    rc=$?
    exit $rc
fi

if [ "$1" = "clean" ]; then
    if [ "${BUILD_ONCE}" = 1 ]; then
        echo "BUILD_ONCE set, skipping clean, reusing build"
        exit 0
    fi
    if ! test -e "$BUILD_DIR"; then
        exit 0
    fi

    rm -rf "${BUILD_DIR:?}"/* "$XLRDIR/cmake_binary_dir"
    rc=$?
    if [ $# -eq 1 ]; then
        exit $rc
    fi
    shift
    exec "$0" "$@"
fi

# generally ENV var set before running the script. Used from jenkins to avoid
# rebuilding when build is shared among jobs
if [ "${BUILD_ONCE}" != "1" ]; then
    # default build
    (cd "$BUILD_DIR" && $BUILDTOOL "$@")
    rc=$?
    # download sqldf
    if [ "${rc}" = "0" ]; then
        cd $XLRDIR
        make sqldf
        rc=$?
    else
        exit $rc
    fi
else
    rc=0
fi

if [ "$1" = "sanity" ] && [ $rc = 0 ]; then
    (cd "$BUILD_DIR" && stdbuf -oL -eL test-harness.py)
    rc=$?
fi

exit $rc
