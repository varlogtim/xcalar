#!/bin/bash
if [ "$DISABLE_FUNC_TESTS" = "true" ]; then
    EnableFuncTests="no"
else
    EnableFuncTests="yes"
fi

if [ "$BUFCACHEPOISON" = "true" ]; then
    EnableBcPoison="yes"
else
    EnableBcPoison="no"
fi

if [ "$BUFCACHETRACE" = "true" ]; then
    EnableBcTrace="yes"
else
    EnableBcTrace="no"
fi

if [ "$MEMTRACK" = "true" ]; then
    EnableMemTrack="yes"
else
    EnableMemTrack="no"
fi

if [ "$MEMTRACKTRACE" = "true" ]; then
    EnableMemTrackTrace="yes"
else
    EnableMemTrackTrace="no"
fi

if [ "$XLR_VALGRIND" = "true" ]; then
    EnableXlrValgrind="yes"
else
    EnableXlrValgrind="no"
fi

if [ "$ADDRESS_SANITIZER" = "true" ]; then
    EnableAddressSanitizer="yes"
else
    EnableAddressSanitizer="no"
fi

if [ "$MEMORY_SANITIZER" = "true" ]; then
    EnableMemorySanitizer="yes"
else
    EnableMemorySanitizer="no"
fi

if [ "$THREAD_SANITIZER" = "true" ]; then
    EnableThreadSanitizer="yes"
else
    EnableThreadSanitizer="no"
fi

if [ "$UNDEFINED_BEHAVIOR_SANITIZER" = "true" ]; then
    EnableUbSanitizer="yes"
else
    EnableUbSanitizer="no"
fi

BUILD_DIR="${BUILD_DIR:-$XLRDIR/buildOut}"
PREFIX="${PREFIX:-/opt/xcalar}"

MYXLRDIR="$(cd "$(dirname $0)"/.. && pwd)"
if [ "$MYXLRDIR" != "$XLRDIR" ]; then
    echo >&2 "WARNING: Mismatched XLRDIR=$XLRDIR, but this script is under $MYXLRDIR"
    echo >&2 "WARNING: Setting XLRDIR=$MYXLRDIR"
    export XLRDIR="$MYXLRDIR"
fi
MY_XCE_LICENSEDIR="$MYXLRDIR/src/data"
if [ "$MY_XCE_LICENSEDIR" != "$XCE_LICENSEDIR" ]; then
    echo >&2 "WARNING: Mismatched license paths - XCE_LICENSEDIR=$XCE_LICENSEDIR but testing will look in $MY_XCE_LICENSEDIR"
    echo >&2 "WARNING: setting XCE_LICENSEDIR=$MY_XCE_LICENSEDIR"
    export XCE_LICENSEDIR=$MY_XCE_LICENSEDIR
fi
export CCACHE_BASEDIR=$XLRDIR
if test -f /opt/rh/devtoolset-7/enable; then
    . /opt/rh/devtoolset-7/enable
fi

if [ -d "$BUILD_DIR" ]; then
    echo >&2 "CMake build is present; please 'cmBuild clean' or 'rm -rf $BUILD_DIR'"
    exit 1
fi

TMP1=$(mktemp /tmp/XXXXXXbuild1)
TMP2=$(mktemp /tmp/XXXXXXbuild2)
rm -f $TMP1 $TMP2
# Filter  for clean, config, analzye
CLANGVER=$(clang --version 2>/dev/null | grep LLVM | cut -f3 -d'(' | cut -f4 -d' ' | sed s'/)//')

if [ ! -e "make/Makefile.project" ]; then
    echo "Cannot find make/Makefile.project.  Bailing"
    exit 1
fi

# Build bin/provision.sh from Dockerfile if necessary
make -f make/Makefile.project submodules bin/provision.sh

confargs="--enable-functests=$EnableFuncTests --enable-bcpoison=$EnableBcPoison --enable-bctrace=$EnableBcTrace --enable-memtracktrace=$EnableMemTrackTrace --enable-memtrack=$EnableMemTrack --enable-xlrvalgrind=$EnableXlrValgrind --enable-addresssanitizer=$EnableAddressSanitizer --enable-memorysanitizer=$EnableMemorySanitizer --enable-threadsanitizer=$EnableThreadSanitizer --enable-ubsanitizer=$EnableUbSanitizer"
confdirs="--prefix=${PREFIX} --sysconfdir=/etc --libexecdir=${PREFIX}/scripts --localstatedir=/var/opt/xcalar"

if echo "$@" | grep -q clang || [[ $CXX =~ clang ]] || [[ $CC =~ clang ]]; then
    conflibc="--enable-libcxx=yes"
else
    conflibc="--enable-libcxx=no"
fi

if [ "$1" = "package" ]; then
    if ! command -v docker >/dev/null; then
        echo "Need to install docker: curl -sL https://get.docker.com | sudo bash" >&2
        exit 1
    fi
    if ! getent group docker | grep -q $(id -un); then
        echo "You need to be a member of the docker group: usermod -aG docker $(whoami)" >&2
        exit 1
    fi
    if [ ! -e Makefile ]; then
        echo "Cannot find Makefile. Run 'build config'."
        exit 1
    fi
    make -f Makefile "$@"
    retval=$?
    if [ $retval -ne 0 ]; then
        echo "Failed to build package" >&2
        exit $retval
    fi
    exit 0
fi

if [ "$1" = "clean" ]; then
    if [ ! -e "Makefile" ]; then
        echo "distclean:" >Makefile
    fi
    make -f make/Makefile.project clean
    if [ "$?" != "0" ]; then
        echo "Failed to clean; fix make/Makefile.project" 1>&2
        exit 1
    fi
    exit 0
fi

if [ "$1" = "config" ] || [ "$1" = "configure" ]; then
    if [ ! -e "configure" ]; then
        make -f make/Makefile.project configure
        if [ "$?" != "0" ]; then
            echo "Failed to generate configure script; fix configure.ac/Makefile.am" 1>&2
            exit 1
        fi
    fi
    shift 1
    ./configure $confargs $confdirs "$@"
    if [ "$?" != "0" ]; then
        echo "Failed to configure build" 1>&2
        exit 1
    fi
    exit 0
fi

if [ "$1" = "analyze" ]; then
    if [ -e "Makefile" ]; then
        echo 'Error: you must run "build clean" before analyzing' 1>&2
        exit 1
    fi
    scan-build --status-bugs build config
    if [ "$?" != "0" ]; then
        echo "Failed to configure analyze build" 1>&2
        exit 1
    fi
    shift 1
    scan-build --status-bugs make "$@" | tee $TMP1
    if [ "$?" != "0" ]; then
        echo "Failed to analyze build" 1>&2
        rm -f $TMP1
        exit 1
    fi
    viewcmd=$(tail $TMP1 | grep 'scan-view' | cut -f2 -d\')
    if [ "$viewcmd" != "" ]; then
        echo "============================================================="
        echo "*** BUGS found by analyze!  Launching web-browser..."
        echo "============================================================="
        $viewcmd
    else
        echo "No bugs found by analyze"
    fi
    rm -f $TMP1
    exit 0
fi

if [ "$1" = "prodconf" ] || [ "$1" = "prodconfig" ]; then
    shift
    if ! test -f configure; then
        autoreconf -fvi
    fi
    ./configure --enable-debug=no --enable-coverage=no --enable-inlines=yes \
                --enable-prof=no --enable-asserts=no --enable-lockstats=no \
                $confargs $conflibc $confdirs "$@"
    exit $?
fi

if [ "$1" = "prod" ] || [ "$1" = "production" ]; then
    # Do a clean first
    if [ ! -e "Makefile" ]; then
        echo "distclean:" >Makefile
    fi
    make -f make/Makefile.project clean
    if [ "$?" != "0" ]; then
        echo "Failed to clean; fix make/Makefile.project" 1>&2
        exit 1
    fi

    # Do a production configure
    if [ ! -e "configure" ]; then
        make -f make/Makefile.project configure
        if [ "$?" != "0" ]; then
            echo "Failed to generate configure script; fix configure.ac/Makefile.am" 1>&2
            exit 1
        fi
    fi
    shift 1

    ./configure --enable-debug=no --enable-coverage=no \
        --enable-inlines=yes --enable-prof=no --enable-asserts=no \
        --enable-lockstats=no $confargs $conflibc $confdirs
    if [ "$?" != "0" ]
    then
        echo "Failed to configure build" 1>&2
        exit 1
    fi

    # Fall down into a normal build
fi

if [ "$1" = "coverage" ]; then
    # Do a clean first.
    if [ ! -e "Makefile" ]; then
        echo "distclean:" >Makefile
    fi
    make -f make/Makefile.project clean
    if [ "$?" != "0" ]; then
        echo "Failed to clean; fix make/Makefile.project" 1>&2
        exit 1
    fi

    # Do autoreconf --install if ./configure file doesn't yet exist.
    if [ ! -e "configure" ]; then
        make -f make/Makefile.project configure
        if [ "$?" != "0" ]; then
            echo "Failed to configure build" 1>&2
            exit 1
        fi
    fi
    shift 1

    ./configure --enable-debug=yes --enable-coverage=yes --enable-inlines=yes \
        --enable-prof=no --enable-asserts=yes $confargs $conflibc $confdirs
    if [ "$?" != "0" ]; then
        echo "Failed to configure build" 1>&2
        exit 1
    fi

    # Fall down into normal build.
fi

if [ "$1" = "prof" ]; then
    # Do a clean first.
    if [ ! -e "Makefile" ]; then
        echo "distclean:" >Makefile
    fi
    make -f make/Makefile.project clean
    if [ "$?" != "0" ]; then
        echo "Failed to clean; fix make/Makefile.project" 1>&2
        exit 1
    fi
    # Do autoreconf --install if ./configure file doesn't yet exist.
    if [ ! -e "configure" ]; then
        make -f make/Makefile.project configure
        if [ "$?" != "0" ]; then
            echo "Failed to configure build" 1>&2
            exit 1
        fi
    fi
    shift 1

    ./configure --enable-debug=no --enable-coverage=no --enable-inlines=yes \
        --enable-prof=yes --enable-asserts=no $confargs $conflibc $confdirs
    if [ "$?" != "0" ]; then
        echo "Failed to configure build" 1>&2
        exit 1
    fi

    # Fall down into normal build.

fi

# Below, we use the -s option by default to reduce useless output. --verbose/-v
# overrides this.
silent=1
if [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then
    silent=0
    shift 1
fi

if [ ! -e "Makefile" ]; then
    echo 'Error: you must run "build config <options>" at least once before building' 1>&2
    exit 1
fi
# Execute other options that are not in the filter above
# swap stderr & stdout so we can copy away stderr into $TMP1
numCpus=$(cat /proc/cpuinfo | grep processor | wc -l)
memTotal=$(cat /proc/meminfo | grep MemTotal | cut -f2- -d:)
memTotal=$(echo $memTotal | cut -f1 -d' ')

if [ $memTotal -ge 4000000 ]; then # ~4GB
    MT=-j$numCpus
fi

if [ $silent -eq 1 ]; then
    make $MT -s V=0 "$@" 3>&1 1>&2 2>&3 3>&- | tee $TMP1
else
    make $MT V=1 "$@" 3>&1 1>&2 2>&3 3>&- | tee $TMP1
fi
retval=${PIPESTATUS[0]}

if [ "$retval" = "0" ]; then
    if [ "$*" = "" ] || [ "$*" = "all" ]; then
        if echo "$@" | grep -q clang || [[ $CXX =~ clang ]] || [[ $CC =~ clang ]]; then
            # error out on new clang static analysis failures
            diff --minimal --suppress-common-lines src/data/clang.false.positives.llvm$CLANGVER $TMP1 >$TMP2
            tail -n +2 $TMP2 | egrep -v "^< " >$TMP1
            LINECNT=$(wc -l $TMP1 | cut -f1 -d' ')
            if [ "$LINECNT" != "0" ]; then
                echo "============================================================" 1>&2
                echo "LIKELY CLANG STATIC ANALYSIS FAILURES:" 1>&2
                cat $TMP1 | sed 's/^> //' 1>&2
                echo "============================================================" 1>&2
                retval=1
            fi
        fi
    fi
fi

rm -f $TMP1 $TMP2
exit $retval
